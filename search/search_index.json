{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FruitNanny is a completely over-engineered do-it-yourself (DIY) open source NoIR baby monitor based on a Raspberry Pi . Kudos to Dmitry Ivanov who had the original project idea .","title":"Home"},{"location":"crafting/","text":"Crafting \u00b6 Todo This section will describe how to craft the FruitNanny from the hardware perspective.","title":"Crafting"},{"location":"crafting/#crafting","text":"Todo This section will describe how to craft the FruitNanny from the hardware perspective.","title":"Crafting"},{"location":"setup/","text":"Rasberry Pi Setup \u00b6 This section describes the software setup of Raspberry Pi. The model used for here is a Raspberry Pi 3+ . Flash the Raspbian \u00b6 We use Raspban Buster Lite as base version. # Download latest zipped Raspbian image. This downloads a # \"YYYY-MM-DD-raspbian-buster-lite.zip\" file. curl -O $( curl --head -sL -w % { url_effective } -o /dev/null https://downloads.raspberrypi.org/raspbian_lite_latest ) # Download the SHA256 checksum curl -O $( curl --head -sL -w % { url_effective } -o /dev/null https://downloads.raspberrypi.org/raspbian_lite_latest ) .sha256 # Verify the download sha256sum -c *-raspbian-buster-lite.zip.sha256 # Unpack zipped image file unzip *-raspbian-buster-lite.zip # Clean up zip and checksum file rm -v *-raspbian-buster-lite.zip *-raspbian-buster-lite.zip.sha256 Now, insert the SD card and determine the device path. In our example this is /dev/mmcblk0 . Note It is the SD device /dev/mmcblk0 , not a partition on the device, e.g. /dev/mmcblk0p1 . Warning Double check the device path. The following operation will destroy any data on the output device. # Write Raspbian image to SD card sudo dd if = $( ls *-raspbian-buster-lite.img ) of = /dev/mmcblk0 bs = 4M status = progress # Reload partition table of the SD card sudo partprobe /dev/mmcblk0 Enable SSH \u00b6 SSH is enabled by placing a file named ssh into the root directory of the boot partition. # Mount boot partition sudo mount /dev/mmcblk0p1 /mnt/ # Create \"ssh\" file to enable SSH server sudo touch /mnt/ssh # Unmount boot partition again sudo umount /mnt The SD card is now ready to boot the Raspberry Pi. Connect Raspberry to host \u00b6 All further commands will be executed via ssh directly on the Raspberry. For this, the host computer needs to connect the Raspberry. There are two options: Either you have connect it with your wired local network and let the router assign an IP address to the Raspberry via DHCP. Connect the Raspberry directly via Ethernet to the host and \"share\" the Internet connection. This can be done easily from within NetworkManager. The following command can be used to create shared connection from the command line. Note Replace the interface name (ifname) eno1 with the name of the ethernet interface that will be connected to the Raspberry Pi. The interfaces can be inspected with ip addr . # Create shared Ethernet connection via NetworkManager nmcli connection add con-name \"Raspberry Pi\" type ethernet ipv4.method shared ifname eno1 Note The IP address can queries via mDNS with the hostname raspberry.local . Ensure that mDNS is available on your system, either via Avahi or systemd-resolve. After figering out the connection method, insert the SD card into the Raspberry and boot the device. ssh pi@raspberrypi.local The default Raspbian password is raspberry . SSH Public Key Authentication \u00b6 The first action will be to replace the default SSH password with proper public key authentication. Copy your public SSH key to the Raspberry: # Executed on the host machine. Copies the public SSH key to the Raspberry ssh-copy-id pi@raspberrypi.local # Now, you can connect the the Raspberry without password ssh pi@raspberrypi.local # Executed on the Raspberry Pi. Deletes the password of the user \"pi\". sudo passwd --delete pi All further setup steps are performed on the Raspberry Pi. Audio Device Setup \u00b6 The Linux audio subsystem of the WebRTC native code package searches all available audio device. The USB microphone should be the first in this list. For that reason, we disable the in the device tree via device tree and rearrange the USB audio driver kernel driver load order. # Disable raspberry audio sudo sed -i \"s/^dtparam=audio=on/# dtparam=audio=on # disabled for rpi-webrtc-streamer/\" \\ /boot/config.txt # Reorder USB audio device index sudo sed -i \"s/^options snd-usb-audio index=-2/# options snd-usb-audio index=-2 # disabled for rpi-webrtc-streamer/\" \\ /lib/modprobe.d/aliases.conf Disable Bluetooth \u00b6 Currently, FruitNanny does not use Bluetooth. In order to save power, we are going to disable the Bluetooth chip via device tree and disable all related services. # Disable Bluetooth via device tree echo -e \"\\n# Disable Bluetooth\\ndtoverlay=pi3-disable-bt\\n\" \\ | sudo tee -a /boot/config.txt # Disable Bluetooth-related services sudo systemctl disable hciuart.service bluealsa.service bluetooth.service Enable DHT11 kernel driver \u00b6 The Linux kernel contains a in-kernel driver for DHT11/21/22 devices. It can be enabled via device tree. # Enable in-kernel DHT22 driver via device tree echo -e \"\\n# Enable DHT11/22 iio kernel driver\\ndtoverlay=dht11,gpiopin=24\\n\" \\ | sudo tee -a /boot/config.txt Install NetworkManager \u00b6 FruitNanny uses NetworkManager to control the WiFi networking via its DBus interface. # Remove default Raspbian DHCP client sudo apt-get remove dhcpcd5 # Install NetworkManager sudo apt-get install network-manager Change Hostname \u00b6 FruitNanny web service will be available under the mDNS hostname fruitnanny.local . The standard Raspbian hostname raspberry will be replaced by fruitnanny . Note If you prefer a different hostname, adjust it to your liking. The hostname is not hard coded in the web UI and should work out-of-the box. # Change hostname sudo hostnamectl set-hostname fruitnanny # Resolve new hostname to localhost echo -e \"127.0.1.1\\t $( hostname ) \\n\" | sudo tee -a /etc/hosts Restart the Device \u00b6 Now, reboot the device for all changes to take effect. The device is available via the hostname fruitnanny.local (or what ever was chosen as new hostname). # Reboot the device sudo reboot # Connect to the device via the new hostname ssh pi@fruitnanny.local The NetworkManager setup can be verified by running nmcli . You should get a status report similar to the following: eth0 : connected to Wired connection 1 \"Standard SMSC9512/9514\" ethernet ( smsc95xx ), B8 : 27 : EB : 1 E : 44 : 64 , hw , mtu 1500 ip4 default inet4 10.42 . 0.33 / 24 route4 0.0 . 0.0 / 0 route4 10.42 . 0.0 / 24 inet6 fe80 :: e425 : 949 f : b455 : aa70 / 64 route6 fe80 ::/ 64 route6 ff00 ::/ 8 wlan0 : disconnected \"Broadcom BCM43438 combo and Bluetooth Low Energy\" wifi ( brcmfmac ), 0 A : 08 : 60 : BD : DB : 6 A , hw , mtu 1500 lo : unmanaged \"lo\" loopback ( unknown ), 00 : 00 : 00 : 00 : 00 : 00 , sw , mtu 65536 DNS configuration : servers : 10.42 . 0.1 interface : eth0 FruitNanny Packages \u00b6 Finally, the FruitNanny packages will be installed. They are provided as Debian packages and hosted as Debian package repository via GitHub Pages. # Add FruitNanny GPG key curl -sL https://fruitnanny.github.io/pubkey.gpg | sudo apt-key add - # Add FruitNanny repository echo \"deb https://fruitnanny.github.io/debian buster main\" | sudo tee /etc/apt/sources.list.d/fruitnanny.list # Update package index sudo apt update # Install FruitNanny packages sudo apt install fruitnanny-api","title":"Rasberry Pi Setup"},{"location":"setup/#rasberry-pi-setup","text":"This section describes the software setup of Raspberry Pi. The model used for here is a Raspberry Pi 3+ .","title":"Rasberry Pi Setup"},{"location":"setup/#flash-the-raspbian","text":"We use Raspban Buster Lite as base version. # Download latest zipped Raspbian image. This downloads a # \"YYYY-MM-DD-raspbian-buster-lite.zip\" file. curl -O $( curl --head -sL -w % { url_effective } -o /dev/null https://downloads.raspberrypi.org/raspbian_lite_latest ) # Download the SHA256 checksum curl -O $( curl --head -sL -w % { url_effective } -o /dev/null https://downloads.raspberrypi.org/raspbian_lite_latest ) .sha256 # Verify the download sha256sum -c *-raspbian-buster-lite.zip.sha256 # Unpack zipped image file unzip *-raspbian-buster-lite.zip # Clean up zip and checksum file rm -v *-raspbian-buster-lite.zip *-raspbian-buster-lite.zip.sha256 Now, insert the SD card and determine the device path. In our example this is /dev/mmcblk0 . Note It is the SD device /dev/mmcblk0 , not a partition on the device, e.g. /dev/mmcblk0p1 . Warning Double check the device path. The following operation will destroy any data on the output device. # Write Raspbian image to SD card sudo dd if = $( ls *-raspbian-buster-lite.img ) of = /dev/mmcblk0 bs = 4M status = progress # Reload partition table of the SD card sudo partprobe /dev/mmcblk0","title":"Flash the Raspbian"},{"location":"setup/#enable-ssh","text":"SSH is enabled by placing a file named ssh into the root directory of the boot partition. # Mount boot partition sudo mount /dev/mmcblk0p1 /mnt/ # Create \"ssh\" file to enable SSH server sudo touch /mnt/ssh # Unmount boot partition again sudo umount /mnt The SD card is now ready to boot the Raspberry Pi.","title":"Enable SSH"},{"location":"setup/#connect-raspberry-to-host","text":"All further commands will be executed via ssh directly on the Raspberry. For this, the host computer needs to connect the Raspberry. There are two options: Either you have connect it with your wired local network and let the router assign an IP address to the Raspberry via DHCP. Connect the Raspberry directly via Ethernet to the host and \"share\" the Internet connection. This can be done easily from within NetworkManager. The following command can be used to create shared connection from the command line. Note Replace the interface name (ifname) eno1 with the name of the ethernet interface that will be connected to the Raspberry Pi. The interfaces can be inspected with ip addr . # Create shared Ethernet connection via NetworkManager nmcli connection add con-name \"Raspberry Pi\" type ethernet ipv4.method shared ifname eno1 Note The IP address can queries via mDNS with the hostname raspberry.local . Ensure that mDNS is available on your system, either via Avahi or systemd-resolve. After figering out the connection method, insert the SD card into the Raspberry and boot the device. ssh pi@raspberrypi.local The default Raspbian password is raspberry .","title":"Connect Raspberry to host"},{"location":"setup/#ssh-public-key-authentication","text":"The first action will be to replace the default SSH password with proper public key authentication. Copy your public SSH key to the Raspberry: # Executed on the host machine. Copies the public SSH key to the Raspberry ssh-copy-id pi@raspberrypi.local # Now, you can connect the the Raspberry without password ssh pi@raspberrypi.local # Executed on the Raspberry Pi. Deletes the password of the user \"pi\". sudo passwd --delete pi All further setup steps are performed on the Raspberry Pi.","title":"SSH Public Key Authentication"},{"location":"setup/#audio-device-setup","text":"The Linux audio subsystem of the WebRTC native code package searches all available audio device. The USB microphone should be the first in this list. For that reason, we disable the in the device tree via device tree and rearrange the USB audio driver kernel driver load order. # Disable raspberry audio sudo sed -i \"s/^dtparam=audio=on/# dtparam=audio=on # disabled for rpi-webrtc-streamer/\" \\ /boot/config.txt # Reorder USB audio device index sudo sed -i \"s/^options snd-usb-audio index=-2/# options snd-usb-audio index=-2 # disabled for rpi-webrtc-streamer/\" \\ /lib/modprobe.d/aliases.conf","title":"Audio Device Setup"},{"location":"setup/#disable-bluetooth","text":"Currently, FruitNanny does not use Bluetooth. In order to save power, we are going to disable the Bluetooth chip via device tree and disable all related services. # Disable Bluetooth via device tree echo -e \"\\n# Disable Bluetooth\\ndtoverlay=pi3-disable-bt\\n\" \\ | sudo tee -a /boot/config.txt # Disable Bluetooth-related services sudo systemctl disable hciuart.service bluealsa.service bluetooth.service","title":"Disable Bluetooth"},{"location":"setup/#enable-dht11-kernel-driver","text":"The Linux kernel contains a in-kernel driver for DHT11/21/22 devices. It can be enabled via device tree. # Enable in-kernel DHT22 driver via device tree echo -e \"\\n# Enable DHT11/22 iio kernel driver\\ndtoverlay=dht11,gpiopin=24\\n\" \\ | sudo tee -a /boot/config.txt","title":"Enable DHT11 kernel driver"},{"location":"setup/#install-networkmanager","text":"FruitNanny uses NetworkManager to control the WiFi networking via its DBus interface. # Remove default Raspbian DHCP client sudo apt-get remove dhcpcd5 # Install NetworkManager sudo apt-get install network-manager","title":"Install NetworkManager"},{"location":"setup/#change-hostname","text":"FruitNanny web service will be available under the mDNS hostname fruitnanny.local . The standard Raspbian hostname raspberry will be replaced by fruitnanny . Note If you prefer a different hostname, adjust it to your liking. The hostname is not hard coded in the web UI and should work out-of-the box. # Change hostname sudo hostnamectl set-hostname fruitnanny # Resolve new hostname to localhost echo -e \"127.0.1.1\\t $( hostname ) \\n\" | sudo tee -a /etc/hosts","title":"Change Hostname"},{"location":"setup/#restart-the-device","text":"Now, reboot the device for all changes to take effect. The device is available via the hostname fruitnanny.local (or what ever was chosen as new hostname). # Reboot the device sudo reboot # Connect to the device via the new hostname ssh pi@fruitnanny.local The NetworkManager setup can be verified by running nmcli . You should get a status report similar to the following: eth0 : connected to Wired connection 1 \"Standard SMSC9512/9514\" ethernet ( smsc95xx ), B8 : 27 : EB : 1 E : 44 : 64 , hw , mtu 1500 ip4 default inet4 10.42 . 0.33 / 24 route4 0.0 . 0.0 / 0 route4 10.42 . 0.0 / 24 inet6 fe80 :: e425 : 949 f : b455 : aa70 / 64 route6 fe80 ::/ 64 route6 ff00 ::/ 8 wlan0 : disconnected \"Broadcom BCM43438 combo and Bluetooth Low Energy\" wifi ( brcmfmac ), 0 A : 08 : 60 : BD : DB : 6 A , hw , mtu 1500 lo : unmanaged \"lo\" loopback ( unknown ), 00 : 00 : 00 : 00 : 00 : 00 , sw , mtu 65536 DNS configuration : servers : 10.42 . 0.1 interface : eth0","title":"Restart the Device"},{"location":"setup/#fruitnanny-packages","text":"Finally, the FruitNanny packages will be installed. They are provided as Debian packages and hosted as Debian package repository via GitHub Pages. # Add FruitNanny GPG key curl -sL https://fruitnanny.github.io/pubkey.gpg | sudo apt-key add - # Add FruitNanny repository echo \"deb https://fruitnanny.github.io/debian buster main\" | sudo tee /etc/apt/sources.list.d/fruitnanny.list # Update package index sudo apt update # Install FruitNanny packages sudo apt install fruitnanny-api","title":"FruitNanny Packages"},{"location":"development/api/","text":"API \u00b6 Todo This section will describe the development of the FruitNanny API.","title":"API"},{"location":"development/api/#api","text":"Todo This section will describe the development of the FruitNanny API.","title":"API"},{"location":"development/ui/","text":"UI \u00b6 Todo This section will describe the development of the web UI.","title":"Web Interface"},{"location":"development/ui/#ui","text":"Todo This section will describe the development of the web UI.","title":"UI"},{"location":"user/debug/","text":"Upgrade failed \u00b6 systemctl status fruitnanny-upgrade.service journalctf -u fruitnanny-upgrade.service","title":"Debug"},{"location":"user/debug/#upgrade-failed","text":"systemctl status fruitnanny-upgrade.service journalctf -u fruitnanny-upgrade.service","title":"Upgrade failed"},{"location":"user/getting-started/","text":"This section describes how to quickly start with the FruitNanny. The FruitNanny is essentially a Raspberry Pi with a NoIR camera, microphone and environmental sensor. The FruitNanny is accessed by a web UI via WiFi. The web GUI provides WebRTC -based video streaming and WiFi controlling capabilities via fruitnanny.local mDNS address. Support Matrix \u00b6 This is a list of platforms and browsers known to work. If your system is not listed here, these are the required technologies: mDNS support in order to resolve *.local domains in a local network Browser with WebRTC support for live video streaming Platform Browser Notes Ubuntu Firefox, Chromium iOS Safari Android Firefox Preview mDNS does not work on Android. Use IP address instead, see this section . First Steps \u00b6 1. Power \u00b6 Connect the FruitNanny to a 5V microUSB power source . A powerbank should also do the trick and provides mobility. As soon as the FruitNanny is powered, it will boot up. 2. Connect to WiFi Hotspot \u00b6 If the FruitNanny does not find any known WiFi network, it starts its WiFi Hotspot . Its default SSID is FruitNanny . Connect to the WiFi to get access to the web UI. 3. Access Web UI \u00b6 Once you are connected to the hotspot, the web UI can be accessed via http://fruitnanny.local/ . Note .local are mDNS domain names. The system and/or browser needs to support this technology. It is a well known issue that mDNS does not work properly on Android. Please consult the support matrix Hit the Play button and you should get a live video. If it is dark, just turn on the infrared light. Only one device can use the live stream at the same time. 4. Powering Off \u00b6 The FruitNanny can be turned off via the main menu in the top left corner. Of course, you could also just unplug the FruitNanny but this should be avoided in order to properly shut down the operating system. Connect to Home WLAN \u00b6 The accessing device only needs to be in the same local network as the FruitNanny in order to use the web UI. This meas if the FruitNanny is later connected to the local home WLAN, the web UI can accessed from any device in the home network. Select Network via the app main menu in the top left corner. Go to the WLAN tab and select the network of choice. You will be prompted for the password. Connect your device to the same WLAN and go back to your browser within 60 seconds . Wait for the connection to be established. Note FruitNanny implements a safety mechanism to avoid you locking yourself out of your FruitNanny when changing network settings. A checkpoint is created before any change in network configuration is performed. This checkpoint will automatically rollback any change after 60 seconds. This means, if you have messed up the your configuration, do not worry, your FruitNanny will be back after one minute. The web UI will try to clear the checkpoint. This is only successful if your device is able to connect to the FruitNanny after the network settings were changed. Installing Updates \u00b6 If the FruitNanny has connection the Internet, it can check and install updates via the web UI. You can check for updates: Go to Settings via app main menu in the top left corner Go to the System tab Hit Check for Updates button. If updates are available, you will see a download icon in the top right corner. Clicking on this icon will install available updates for all FruitNanny-related system packages. Using IP Addresses \u00b6 Todo This section will describe how to use the FruitNanny in case mDNS is not available.","title":"Getting started"},{"location":"user/getting-started/#support-matrix","text":"This is a list of platforms and browsers known to work. If your system is not listed here, these are the required technologies: mDNS support in order to resolve *.local domains in a local network Browser with WebRTC support for live video streaming Platform Browser Notes Ubuntu Firefox, Chromium iOS Safari Android Firefox Preview mDNS does not work on Android. Use IP address instead, see this section .","title":"Support Matrix"},{"location":"user/getting-started/#first-steps","text":"","title":"First Steps"},{"location":"user/getting-started/#1-power","text":"Connect the FruitNanny to a 5V microUSB power source . A powerbank should also do the trick and provides mobility. As soon as the FruitNanny is powered, it will boot up.","title":"1. Power"},{"location":"user/getting-started/#2-connect-to-wifi-hotspot","text":"If the FruitNanny does not find any known WiFi network, it starts its WiFi Hotspot . Its default SSID is FruitNanny . Connect to the WiFi to get access to the web UI.","title":"2. Connect to WiFi Hotspot"},{"location":"user/getting-started/#3-access-web-ui","text":"Once you are connected to the hotspot, the web UI can be accessed via http://fruitnanny.local/ . Note .local are mDNS domain names. The system and/or browser needs to support this technology. It is a well known issue that mDNS does not work properly on Android. Please consult the support matrix Hit the Play button and you should get a live video. If it is dark, just turn on the infrared light. Only one device can use the live stream at the same time.","title":"3. Access Web UI"},{"location":"user/getting-started/#4-powering-off","text":"The FruitNanny can be turned off via the main menu in the top left corner. Of course, you could also just unplug the FruitNanny but this should be avoided in order to properly shut down the operating system.","title":"4. Powering Off"},{"location":"user/getting-started/#connect-to-home-wlan","text":"The accessing device only needs to be in the same local network as the FruitNanny in order to use the web UI. This meas if the FruitNanny is later connected to the local home WLAN, the web UI can accessed from any device in the home network. Select Network via the app main menu in the top left corner. Go to the WLAN tab and select the network of choice. You will be prompted for the password. Connect your device to the same WLAN and go back to your browser within 60 seconds . Wait for the connection to be established. Note FruitNanny implements a safety mechanism to avoid you locking yourself out of your FruitNanny when changing network settings. A checkpoint is created before any change in network configuration is performed. This checkpoint will automatically rollback any change after 60 seconds. This means, if you have messed up the your configuration, do not worry, your FruitNanny will be back after one minute. The web UI will try to clear the checkpoint. This is only successful if your device is able to connect to the FruitNanny after the network settings were changed.","title":"Connect to Home WLAN"},{"location":"user/getting-started/#installing-updates","text":"If the FruitNanny has connection the Internet, it can check and install updates via the web UI. You can check for updates: Go to Settings via app main menu in the top left corner Go to the System tab Hit Check for Updates button. If updates are available, you will see a download icon in the top right corner. Clicking on this icon will install available updates for all FruitNanny-related system packages.","title":"Installing Updates"},{"location":"user/getting-started/#using-ip-addresses","text":"Todo This section will describe how to use the FruitNanny in case mDNS is not available.","title":"Using IP Addresses"}]}